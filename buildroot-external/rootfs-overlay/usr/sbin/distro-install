#!/bin/bash
set -e

if [ -z "$1" -o -z "$2" ]; then
  echo "Usage: $0 <repair|overwrite> /dev/sdX"
  exit 1
fi

if ! systemctl is-active recovery.target >/dev/null; then
  echo "Error: recovery.target required"
  exit 1
fi

BOOT_UUID="b3dd0952-733c-4c88-8cba-cab9b8b4377f"
BOOTSTATE_UUID="33236519-7F32-4DFF-8002-3390B62C309D"
SYSTEM0_UUID="8d3d53e3-6d49-4c38-8349-aff6859e82fd"
SYSTEM1_UUID="a3ec664e-32ce-4665-95ea-7ae90ce9aa20"
KERNEL0_UUID="26700fc6-b0bc-4ccf-9837-ea1a4cba3e65"
KERNEL1_UUID="fc02a4f0-5350-406f-93a2-56cbed636b5f"
OVERLAY_UUID="f1326040-5236-40eb-b683-aaa100a9afcf"
DATA_UUID="a52a4597-fa3a-4851-aefd-2fbe9f849079"
DVR_UUID="78eeef04-2a71-490b-aeba-0ab817a8b399"

BOOT_SIZE=32M
BOOTSTATE_SIZE=8M
SYSTEM_SIZE=256M
KERNEL_SIZE=24M
OVERLAY_SIZE=96M
DATA_SIZE=8G

function size2sectors() {
    local f=0
    for v in "${@}"
    do
    local p=$(echo "$v" | awk \
      'BEGIN{IGNORECASE = 1}
       function printsectors(n,b,p) {printf "%u\n", n*b^p/512}
       /B$/{     printsectors($1,  1, 0)};
       /K(iB)?$/{printsectors($1,  2, 10)};
       /M(iB)?$/{printsectors($1,  2, 20)};
       /G(iB)?$/{printsectors($1,  2, 30)};
       /T(iB)?$/{printsectors($1,  2, 40)};
       /KB$/{    printsectors($1, 10,  3)};
       /MB$/{    printsectors($1, 10,  6)};
       /GB$/{    printsectors($1, 10,  9)};
       /TB$/{    printsectors($1, 10, 12)}')
    for s in $p
    do
        f=$((f+s))
    done

    done
    echo $f
}

hdd_img="$2"
dir=$(mktemp -d /run/installer.XXXXXX)
cd "$dir"
trap "{ cd /; rm -rf $dir; }" EXIT

if [ "$1" = "repair" -o "$1" = "overwrite" ]; then
  sgdisk \
    -Z \
    -o \
    -n "0:0:+$BOOT_SIZE"        -c 0:"hassos-boot"      -t 0:"C12A7328-F81F-11D2-BA4B-00A0C93EC93B" -u "0:${BOOT_UUID}" \
    -n "0:0:+$KERNEL_SIZE"      -c 0:"hassos-kernel0"   -t 0:"0FC63DAF-8483-4772-8E79-3D69D8477DE4" -u "0:${KERNEL0_UUID}" \
    -n "0:0:+${SYSTEM_SIZE}"    -c 0:"hassos-system0"   -t 0:"0FC63DAF-8483-4772-8E79-3D69D8477DE4" -u "0:${SYSTEM0_UUID}" \
    -n "0:0:+${KERNEL_SIZE}"    -c 0:"hassos-kernel1"   -t 0:"0FC63DAF-8483-4772-8E79-3D69D8477DE4" -u "0:${KERNEL1_UUID}" \
    -n "0:0:+${SYSTEM_SIZE}"    -c 0:"hassos-system1"   -t 0:"0FC63DAF-8483-4772-8E79-3D69D8477DE4" -u "0:${SYSTEM1_UUID}" \
    -n "0:0:+${BOOTSTATE_SIZE}" -c 0:"hassos-bootstate"                                             -u "0:${BOOTSTATE_UUID}" \
    -n "0:0:+${OVERLAY_SIZE}"   -c 0:"hassos-overlay"   -t 0:"0FC63DAF-8483-4772-8E79-3D69D8477DE4" -u "0:${OVERLAY_UUID}" \
    -n "0:0:+${DATA_SIZE}"      -c 0:"hassos-data"      -t 0:"0FC63DAF-8483-4772-8E79-3D69D8477DE4" -u "0:${DATA_UUID}" \
    -n "0:0:0"                  -c 0:"DVR"              -t 0:"EBD0A0A2-B9E5-4433-87C0-68B6B72699C7" -u "0:${DVR_UUID}" \
    -v \
    "$hdd_img"

  partx -u "$hdd_img"

  dd if=/dev/zero of="${hdd_img}6" bs=512 count=$(size2sectors "$BOOTSTATE_SIZE")
  cat > rauc.conf <<EOF
[system]
compatible=ChannelsDVRServer-PI4
bootloader=uboot
mountprefix=$dir
statusfile=$dir/rauc.db
[keyring]
path=/etc/rauc/keyring.pem
[slot.boot.0]
device=${hdd_img}1
type=vfat
allow-mounted=true
[slot.kernel.0]
device=${hdd_img}2
type=ext4
bootname=A
[slot.rootfs.0]
device=${hdd_img}3
type=raw
parent=kernel.0
EOF
  if [ ! -f /run/installer/update.raucb ]; then
    mkdir -p /run/installer
    version=$(curl -s https://channels-distro.s3.amazonaws.com/latest.json | jq -r .version)
    wget -O /run/installer/update.raucb https://channels-distro.s3.amazonaws.com/$version/ChannelsDVRServer_PI4.raucb
    unsquashfs -d /run/installer -f /run/installer/update.raucb 
  fi
  rauc -c rauc.conf write-slot boot.0   /run/installer/boot.vfat
  rauc -c rauc.conf write-slot kernel.0 /run/installer/kernel.ext4
  rauc -c rauc.conf write-slot rootfs.0 /run/installer/rootfs.img
fi

if [ "$1" = "repair" ]; then
  fsck.vfat -y "${hdd_img}1"
  fsck.ext4 -y "${hdd_img}7"
  fsck.ext4 -y "${hdd_img}8"
  fsck.exfat -y "${hdd_img}9"
elif [ "$1" = "overwrite" ]; then
  mkfs.ext4 -F -L "hassos-overlay" -E lazy_itable_init=0,lazy_journal_init=0 "${hdd_img}7"

  mkfs.ext4 -F -L "hassos-data" -E lazy_itable_init=0,lazy_journal_init=0 "${hdd_img}8"
  mkdir -p data
  mount "${hdd_img}8" data
  cd data
  curl -s https://getchannels.com/dvr/setup.sh | DOWNLOAD_ONLY=1 sh
	chown -R 501:501 channels-dvr
  cd ..
  umount data

  mkfs.exfat -n DVR "${hdd_img}9"
fi

echo
echo "Finished $1 on $hdd_img!"
echo "You may now remove the drive."